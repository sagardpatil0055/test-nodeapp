
pipeline {
    agent { label 'app' }

    environment {
        REPO_URL       = 'https://github.com/sagardpatil0055/test-nodeapp.git'
        AWS_REGION     = 'us-east-1'
        AWS_ACCOUNT_ID = '980104576357'
        ECR_REPO       = 'test-nodeapp-repo'
        ECR_URI        = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO}"
        IMAGE_NAME     = 'test-nodeapp'
        APP_HOST_IP    = 'YOUR.APP.HOST.IP.HERE' // üîÅ Replace this
    }

    parameters {
        string(name: 'BRANCH', defaultValue: 'main', description: 'Git branch to build')
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: "${params.BRANCH}", url: "${REPO_URL}"
            }
        }

        stage('Determine Next Integer Version') {
            steps {
                script {
                    echo "üîç Checking existing numeric tags in ECR..."

                    def rawTags = sh(
                        script: "aws ecr list-images --repository-name ${ECR_REPO} --region ${AWS_REGION} --query 'imageIds[*].imageTag' --output text",
                        returnStdout: true
                    ).trim().split()

                    def numericTags = rawTags.findAll { it ==~ /^\\d+\$/ }.collect { it.toInteger() }

                    def lastVersion = numericTags.size() > 0 ? numericTags.max() : 0
                    def newVersion = lastVersion + 1

                    env.NEW_TAG = "${newVersion}"
                    echo "‚úÖ New image version to push: ${env.NEW_TAG}"
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                script {
                    sh """
                        echo "üî® Building Docker image..."
                        docker build --pull -t ${IMAGE_NAME}:${NEW_TAG} .

                        echo "üè∑Ô∏è Tagging for ECR..."
                        docker tag ${IMAGE_NAME}:${NEW_TAG} ${ECR_URI}:${NEW_TAG}

                        echo "üì§ Pushing to ECR..."
                        docker push ${ECR_URI}:${NEW_TAG}
                    """
                }
            }
        }

        stage('Pull for Validation') {
            steps {
                script {
                    sh """
                        echo "üì• Validating pushed image by pulling it back..."
                        docker pull ${ECR_URI}:${NEW_TAG}
                        docker image inspect ${ECR_URI}:${NEW_TAG}
                    """
                }
            }
        }

        stage('Deploy to App Host') {
            steps {
                script {
                    echo "üöÄ Deploying to app host: ${APP_HOST_IP}"

                    sh """
                        ssh -o StrictHostKeyChecking=no root@${APP_HOST_IP} '
                            echo "üõë Stopping old container..."
                            docker ps -q --filter name=test-nodeapp | grep . && docker stop test-nodeapp || echo "No running container to stop"
                            docker ps -a -q --filter name=test-nodeapp | grep . && docker rm test-nodeapp || echo "No container to remove"

                            echo "üì• Pulling new image..."
                            docker pull ${ECR_URI}:${NEW_TAG}

                            echo "üöÄ Running new container on port 8081..."
                            docker run -d --name test-nodeapp -p 8081:8081 ${ECR_URI}:${NEW_TAG}
                        '
                    """
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Successfully built, pushed, and deployed version ${env.NEW_TAG} to ECR and app host"
        }
        failure {
            echo "‚ùå Pipeline failed. Please check logs."
        }
    }
}
